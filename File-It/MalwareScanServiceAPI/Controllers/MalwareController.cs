using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace MalwareScanServiceAPI.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class MalwareController : ControllerBase
    {
        IConfiguration _configuration;
        private readonly ILogger<MalwareController> _logger;

        public MalwareController(IConfiguration configuration, ILogger<MalwareController> logger)
        {
            _configuration = configuration;
            _logger = logger;
        }

        [HttpPost("scan")]
        public async Task<IActionResult> ScanFile([FromForm] IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("No file uploaded.");
            }

            var filePath = Path.GetTempFileName();

            // Save the file to a temporary location
            try
            {
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }

                _logger.LogInformation($"File saved to {filePath}");

                // Scan the file using ClamAV
                var result = await ScanFileWithClamAV(filePath);

                // Delete the temporary file
                System.IO.File.Delete(filePath);

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error scanning file");
                return StatusCode(500, "Internal server error");
            }
        }

        private async Task<string> ScanFileWithClamAV(string filePath)
        {
            var clamscanPath = _configuration["ClamAV:Path"];

            var processStartInfo = new ProcessStartInfo
            {
                FileName = clamscanPath,
                Arguments = $"--no-summary \"{filePath}\"",
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (var process = new Process { StartInfo = processStartInfo })
            {
                process.Start();
                var output = await process.StandardOutput.ReadToEndAsync();
                process.WaitForExit();

                _logger.LogInformation($"ClamAV output: {output}");

                // Check the output for virus detection
                return output.Contains("OK") ? "File is clean" : "File is infected";
            }
        }

    }
}
